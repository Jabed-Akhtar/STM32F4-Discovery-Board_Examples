/*
******************************************************************************
* Copyright: 2021 Frankfurt University of Applied Sciences
* Automechatronic Lab 1: Implementation of a CAN node
* author: MD Jabed Akhtar (MatrikelNr.: 1219926)
*
* File: main.c
*
* System Clock: 168 MHz (max Value)
* CAN1 Config:
* 		Clock (APB1): 42 MHz
* 		baudrate: 125 kBd
* 		Mode: Loopback
* 		Filter: 11bit throughout
* 		Rx-ISR: green LED toggles at message received (GPIOD-12)
* 		rx-Messages:
* 			0x234 (DLC 4)
* 		tx-Messages:
* 			0x89 (DLC 4)
* 			0x123 (DLC 2)
* ADC1:
* 		internal Temperature -> only raw Value available
* Push Buttton (onboard):
*		- for sending out value of internal temperature Sensor's Data with Message ID 0x123 (DLC 2)
* for testing:
* 		- tx-Message (CAN) -> 0x234 (DLC 4)
*
******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stdio.h"

/* Private macro */
/* Private variables */
volatile CanRxMsg rxMsg;
volatile CanTxMsg tx_test_0x234, txMsg_0x89, txMsg_0x123_TempSen;

volatile uint16_t val_TempSen; // variable for saving Temperature Sensor value

/* Private function prototypes */
/* Private functions */
void init_LED(void); // configuring LEDs
void init_CAN(void); // configuring CAN (CAN1)
void init_Button(void); // configuring external Interrupt (Button)
void init_ADC(void); // configuring ADC (ADC1)

/**
**===========================================================================
**  Abstract: main program
**===========================================================================
*/
int main(void)
{
	SystemInit(); // initializing System

	init_LED(); // configuring LEDs
	init_Button(); // configuring Button

    /* Infinite loop */
  	while (1)
    {
  		__WFI(); // sending CPU to sleep -> Wait For Interrupt
    }
}

// configuring Button ***************************************************
void init_Button(void){
	// enabling Clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); // activate clock for GPIOA
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE); // activate clock for EXTI
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0); // connect EXTI-Line

    // GPIO Init structure definition
    GPIO_InitTypeDef button;
    button.GPIO_Mode = GPIO_Mode_IN;
    button.GPIO_OType = GPIO_OType_PP;
    button.GPIO_Pin = GPIO_Pin_0;
    button.GPIO_PuPd = GPIO_PuPd_NOPULL;
    button.GPIO_Speed = GPIO_Speed_100MHz;
    GPIO_Init(GPIOA, &button);

    // EXTI Init Structure definition - onBoard Button
    EXTI_InitTypeDef iButton;
    iButton.EXTI_Line = EXTI_Line0;
    iButton.EXTI_LineCmd = ENABLE;
    iButton.EXTI_Mode = EXTI_Mode_Interrupt;
    iButton.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_Init(&iButton);

    // Enable EXTI0_IRQn Interrupt
    NVIC_EnableIRQ(EXTI0_IRQn); // register interrupt with NVIC default settings
}

// Function for initializing LED ******************************************
void init_LED(void){
	// enabling Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);   // Clock for LED

	// GPIO Init structure definition
	GPIO_InitTypeDef led;
	led.GPIO_Mode = GPIO_Mode_OUT;
	led.GPIO_OType = GPIO_OType_PP;
	led.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
	led.GPIO_PuPd = GPIO_PuPd_UP;
	led.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &led);   // Initializing the GPIO
}

// ================================= END OF FILE =================================
