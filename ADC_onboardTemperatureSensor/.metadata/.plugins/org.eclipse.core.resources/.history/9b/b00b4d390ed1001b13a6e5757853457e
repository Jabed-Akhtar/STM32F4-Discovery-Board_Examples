/*
******************************************************************************
* @author: Jabed Akhtar
* @date: 19-June-2021
******************************************************************************
* System Clock: 168 MHz (max available)
* ADC1: internal Temperature -> only raw Value available
* Description:
*		- value of ADC (raw) can be seeen in Debug (please see picture attached with this Project)
******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stdio.h"

/* Private functions */
void
void init_ADC(void); // configuring ADC (ADC1)

/* Global Parameters */
volatile uint16_t val_TempSen; // variable for saving Temperature Sensor value

/**
**===========================================================================
**  Abstract: main program
**===========================================================================
*/
int main(void)
{
	SystemInit(); // initializing System

	init_LED(); // configuring LEDs
	init_Button(); // configuring Button
	init_ADC(); // configuring ADC1

    /* Infinite loop */
  	while (1)
    {
  		//__WFI(); // sending CPU to sleep -> Wait For Interrupt
    }
}

// Function for Button Interrupt Handler ********************************
void EXTI0_IRQHandler(void){
    if(EXTI_GetFlagStatus(EXTI_Line0)== SET){ // when Button is pressed!
    	//GPIO_ToggleBits(GPIOD, GPIO_Pin_13); // toggling the LED

    	// enabling the ADC software start conversion
    	ADC_SoftwareStartConv(ADC1);

    	if(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){ // when End of conversion flag of ADC is confirmed!
    		val_TempSen = ADC_GetConversionValue(ADC1); // getting value

    		//val_TempSen = val_TempSen * 3.3/4096;
    	}

    	// clearing the EXTI's line pending bits
    	EXTI_ClearITPendingBit(EXTI_Line0);
	}
}

// Function for initializing/configuring ADC for internal Temperature Sensor *****
void init_ADC(void){

	// enabling Clock for ADC1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
	// Turn on GPIO The clock  PA5
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	//GPIO initialization   Initialize to analog function
	GPIO_InitTypeDef pin_adc;
	pin_adc.GPIO_Pin = GPIO_Pin_1;
	pin_adc.GPIO_Mode = GPIO_Mode_AN;
	pin_adc.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &pin_adc);

	// enabling the temperature sensor and Vrefint channels
	ADC_TempSensorVrefintCmd(ENABLE);
	//ADC_VBATCmd(ENABLE);

	// ADC Common Init structure definition
	ADC_CommonInitTypeDef adcc;
	adcc.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
	adcc.ADC_Mode = ADC_Mode_Independent;
	adcc.ADC_Prescaler = ADC_Prescaler_Div4;
	adcc.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&adcc);

	// ADC Init structure definition
	ADC_InitTypeDef adc;
	adc.ADC_ContinuousConvMode = DISABLE;
	adc.ADC_DataAlign = ADC_DataAlign_Right;
	adc.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
	adc.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	adc.ADC_NbrOfConversion = 1;
	adc.ADC_Resolution = ADC_Resolution_12b;
	adc.ADC_ScanConvMode = DISABLE;
	ADC_Init(ADC1, &adc);

	// configuring Regular Channel
	ADC_RegularChannelConfig(ADC1, ADC_Channel_TempSensor, 1, ADC_SampleTime_15Cycles);

	// enabling ADC1
	ADC_Cmd(ADC1, ENABLE);
}

// configuring Button ***************************************************
void init_Button(void){
	// enabling Clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); // activate clock for GPIOA
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE); // activate clock for EXTI
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0); // connect EXTI-Line

    // GPIO Init structure definition
    GPIO_InitTypeDef button;
    button.GPIO_Mode = GPIO_Mode_IN;
    button.GPIO_OType = GPIO_OType_PP;
    button.GPIO_Pin = GPIO_Pin_0;
    button.GPIO_PuPd = GPIO_PuPd_NOPULL;
    button.GPIO_Speed = GPIO_Speed_100MHz;
    GPIO_Init(GPIOA, &button);

    // EXTI Init Structure definition - onBoard Button
    EXTI_InitTypeDef iButton;
    iButton.EXTI_Line = EXTI_Line0;
    iButton.EXTI_LineCmd = ENABLE;
    iButton.EXTI_Mode = EXTI_Mode_Interrupt;
    iButton.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_Init(&iButton);

    // Enable EXTI0_IRQn Interrupt
    NVIC_EnableIRQ(EXTI0_IRQn); // register interrupt with NVIC default settings
}

// Function for initializing LED ******************************************
void init_LED(void){
	// enabling Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);   // Clock for LED

	// GPIO Init structure definition
	GPIO_InitTypeDef led;
	led.GPIO_Mode = GPIO_Mode_OUT;
	led.GPIO_OType = GPIO_OType_PP;
	led.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
	led.GPIO_PuPd = GPIO_PuPd_UP;
	led.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &led);   // Initializing the GPIO
}

// ================================= END OF FILE =================================
