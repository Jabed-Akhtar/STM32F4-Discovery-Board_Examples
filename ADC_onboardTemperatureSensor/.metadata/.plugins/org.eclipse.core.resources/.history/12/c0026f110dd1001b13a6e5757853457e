/*
******************************************************************************
* Copyright: 2021 Frankfurt University of Applied Sciences
* Automechatronic Lab 1: Implementation of a CAN node
* author: MD Jabed Akhtar (MatrikelNr.: 1219926)
*
* File: main.c
*
* System Clock: 168 MHz (max Value)
* CAN1 Config:
* 		Clock (APB1): 42 MHz
* 		baudrate: 125 kBd
* 		Mode: Loopback
* 		Filter: 11bit throughout
* 		Rx-ISR: green LED toggles at message received (GPIOD-12)
* 		rx-Messages:
* 			0x234 (DLC 4)
* 		tx-Messages:
* 			0x89 (DLC 4)
* 			0x123 (DLC 2)
* ADC1:
* 		internal Temperature -> only raw Value available
* Push Buttton (onboard):
*		- for sending out value of internal temperature Sensor's Data with Message ID 0x123 (DLC 2)
* for testing:
* 		- tx-Message (CAN) -> 0x234 (DLC 4)
*
******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stdio.h"

/* Private macro */
/* Private variables */
volatile CanRxMsg rxMsg;
volatile CanTxMsg tx_test_0x234, txMsg_0x89, txMsg_0x123_TempSen;

volatile uint16_t val_TempSen; // variable for saving Temperature Sensor value

volatile uint16_t test_val = 0x1234;

/* Private function prototypes */
/* Private functions */
void init_LED(void); // configuring LEDs
void init_CAN(void); // configuring CAN (CAN1)
void init_Button(void); // configuring external Interrupt (Button)
void init_ADC(void); // configuring ADC (ADC1)

/**
**===========================================================================
**  Abstract: main program
**===========================================================================
*/
int main(void)
{
	SystemInit(); // initializing System

	init_LED(); // configuring LEDs
	init_CAN(); // configuring CAN1
	init_Button(); // configuring Button
	init_ADC(); // configuring ADC1

    /* Infinite loop */
  	while (1)
    {
  		//__WFI(); // sending CPU to sleep -> Wait For Interrupt
    }
}

/* ****************** Functions ****************** */
// Function for CAN1_Rx Interrupt Handler for handling CAN-Received Messages *****
void CAN1_RX0_IRQHandler(void){

	// receiving a CAN frame
	CAN_Receive(CAN1, CAN_FIFO0, &rxMsg); // receiving CAN-messages
	GPIO_ToggleBits(GPIOD, GPIO_Pin_12); // toggling the LED when messages are received

	/* Checks whether FIFO0 message pending Interrupt has occurred or not */
	if(CAN_GetITStatus(CAN1, CAN_IT_FMP0)==RESET){
		/*
		 * Whenever message with ID 0x234 (with DLC = 4) is received
		 * -> all data bytes is returned back in reverse order with ID 0x89
		 */
		if (rxMsg.StdId==0x234 && rxMsg.DLC==4){
			txMsg_0x89.IDE = CAN_ID_STD;
			txMsg_0x89.StdId = 0x89;
			txMsg_0x89.DLC = 4;
			uint8_t num_dlc = 3;
			for(uint8_t cou=0;cou<4;cou++){
				txMsg_0x89.Data[cou] = rxMsg.Data[num_dlc-cou];
			}
			CAN_Transmit(CAN1, &txMsg_0x89);
		}

		// this is only for testing -> whether message is received form ID 0x123
		if(rxMsg.StdId==0x123){ //  && rxMsg.Data[0]==val_TempSen>>8 && rxMsg.Data[1]==val_TempSen
			if(rxMsg.Data>=0x400){
				GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
			}
		}
		// these are also only for testing -> 11bit IDs filter testing
		if (rxMsg.StdId==0x7FF){
			GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
		}
		if (rxMsg.ExtId==0xFFF){
			GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
		}
	}

	// clearing the CAN1's interrupt pending bits
	CAN_ClearITPendingBit(CAN1, CAN_IT_FMP0);
}

// Function for Button Interrupt Handler ********************************
void EXTI0_IRQHandler(void){
    if(EXTI_GetFlagStatus(EXTI_Line0)== SET){ // when Button is pressed!
    	//GPIO_ToggleBits(GPIOD, GPIO_Pin_13); // toggling the LED

    	// enabling the ADC software start conversion
    	ADC_SoftwareStartConv(ADC1);

    	if(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){ // when End of conversion flag of ADC is confirmed!
    		val_TempSen = ADC_GetConversionValue(ADC1); // getting value

    		//val_TempSen = val_TempSen * 3.3/4096;

    		/* CAN-Message (with ID 0x123) with sensor Value to be sent when Button is pressed! */
    		txMsg_0x123_TempSen.IDE = CAN_ID_STD;
    		txMsg_0x123_TempSen.StdId = 0x123;
    		txMsg_0x123_TempSen.DLC = 2;
    		txMsg_0x123_TempSen.Data[0] = test_val>>8; //val_TempSen;
    		txMsg_0x123_TempSen.Data[1] = test_val; //val_TempSen;
    		CAN_Transmit(CAN1, &txMsg_0x123_TempSen);
    	}

    	// sending CAN-Message -> for testing !!!!!
    	/*
    	tx_test_0x234.IDE = CAN_ID_STD;
    	tx_test_0x234.StdId = 0x234;
    	tx_test_0x234.DLC = 4;
    	tx_test_0x234.RTR = CAN_RTR_DATA;
    	tx_test_0x234.Data[0] = 2;
    	tx_test_0x234.Data[1] = 3;
    	tx_test_0x234.Data[2] = 4;
    	tx_test_0x234.Data[3] = 5;
    	CAN_Transmit(CAN1, &tx_test_0x234);
    	*/

    	// clearing the ADC1's interrupt pending bits
    	ADC_ClearITPendingBit(ADC1, ADC_FLAG_EOC);

    	// clearing the EXTI's line pending bits
    	EXTI_ClearITPendingBit(EXTI_Line0);
	}
}

// Function for initializing/configuring CAN ****************************
void init_CAN(void){
	// enabling Clocks
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); // clock for CAN1
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE); // clock for Pins for CAN

	// configuring CAN-Pins as Alternate functions
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_CAN1);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_CAN1);

	// GPIO Init structure definition
	GPIO_InitTypeDef pinCAN;
	pinCAN.GPIO_Mode = GPIO_Mode_AF;
	pinCAN.GPIO_OType = GPIO_OType_PP;
	pinCAN.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
	pinCAN.GPIO_PuPd = GPIO_PuPd_NOPULL;
	pinCAN.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &pinCAN);

	// CAN init structure definition
	//CAN_DeInit(CAN1);
	CAN_InitTypeDef myCAN;
	myCAN.CAN_Mode = CAN_Mode_Normal; // Specifies CAN operating mode as LoopBack
	myCAN.CAN_Prescaler = 21; // Dividing CAN-Clock with prescaler
	myCAN.CAN_BS1 = CAN_BS1_13tq; // Specifies the number of time quanta in Bit Segment CAN_BS1_xtq (1-16)
	myCAN.CAN_BS2 = CAN_BS2_2tq;
	myCAN.CAN_SJW = CAN_SJW_1tq; // maximum number of time quanta
	myCAN.CAN_ABOM = DISABLE; // automatic bus-off management: enable/disable
	myCAN.CAN_AWUM = ENABLE; // automatic wake-up mode: enable/disable
	myCAN.CAN_NART = ENABLE; // non-automatic retransmission mode: enable/disable
	myCAN.CAN_RFLM = DISABLE; // Receive FIFO Locked mode: enable/disable
	myCAN.CAN_TTCM = DISABLE; // time triggered communication mode: enable/disable
	myCAN.CAN_TXFP = DISABLE; // Transmit FIFO priority: enable/disable
	CAN_Init(CAN1, &myCAN);

	// CAN filter init structure definition
	CAN_FilterInitTypeDef filt_CAN;
	filt_CAN.CAN_FilterActivation = ENABLE; //
	filt_CAN.CAN_FilterFIFOAssignment = CAN_FIFO0;//FIFO (0 or 1) which will be assigned to the filter
	filt_CAN.CAN_FilterIdHigh = 0x0000; //filter identification number, MSBs -> 0000 0000 0000 0000
	filt_CAN.CAN_FilterIdLow = 0x0000; //filter identification number, LSBs -> 0000 0000 0000 0000
	filt_CAN.CAN_FilterMaskIdHigh = 0x001F; //filter mask number or identification number, MSB -> 0000 0000 0001 1111
	filt_CAN.CAN_FilterMaskIdLow = 0xFFF8; //filter mask number or identification number, LSB -> 1111 1111 1111 1000
	filt_CAN.CAN_FilterMode = CAN_FilterMode_IdMask; //filter mode to be initialized: _IdMask||_IdList
	filt_CAN.CAN_FilterNumber = 0; //filter which will be initialized. It ranges from 0 to 13
	filt_CAN.CAN_FilterScale = CAN_FilterScale_32bit; //One 32-bit filter || _16bit two 16-bit filters
	CAN_FilterInit(&filt_CAN);

	// initializing NVIC for CAN
	NVIC_InitTypeDef nvic_CAN;
	nvic_CAN.NVIC_IRQChannel = CAN1_RX0_IRQn;
	nvic_CAN.NVIC_IRQChannelCmd = ENABLE;
	nvic_CAN.NVIC_IRQChannelPreemptionPriority = 1;
	nvic_CAN.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&nvic_CAN);

	// Enable CAN1 interrupt
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
	//NVIC_EnableIRQ(CAN1_RX0_IRQn);
}

// Function for initializing/configuring ADC for internal Temperature Sensor *****
void init_ADC(void){

	// enabling Clock for ADC1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
	// Turn on GPIO The clock  PA5
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	//GPIO initialization   Initialize to analog function
	GPIO_InitTypeDef pin_adc;
	pin_adc.GPIO_Pin = GPIO_Pin_1;
	pin_adc.GPIO_Mode = GPIO_Mode_AN;
	pin_adc.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &pin_adc);

	// enabling the temperature sensor and Vrefint channels
	ADC_TempSensorVrefintCmd(ENABLE);
	//ADC_VBATCmd(ENABLE);

	// ADC Common Init structure definition
	ADC_CommonInitTypeDef adcc;
	adcc.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
	adcc.ADC_Mode = ADC_Mode_Independent;
	adcc.ADC_Prescaler = ADC_Prescaler_Div4;
	adcc.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&adcc);

	// ADC Init structure definition
	ADC_InitTypeDef adc;
	adc.ADC_ContinuousConvMode = DISABLE;
	adc.ADC_DataAlign = ADC_DataAlign_Right;
	adc.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
	adc.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	adc.ADC_NbrOfConversion = 1;
	adc.ADC_Resolution = ADC_Resolution_12b;
	adc.ADC_ScanConvMode = DISABLE;
	ADC_Init(ADC1, &adc);

	// configuring Regular Channel
	ADC_RegularChannelConfig(ADC1, ADC_Channel_TempSensor, 1, ADC_SampleTime_15Cycles);

	// enabling ADC1
	ADC_Cmd(ADC1, ENABLE);
}

// configuring Button ***************************************************
void init_Button(void){
	// enabling Clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); // activate clock for GPIOA
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE); // activate clock for EXTI
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0); // connect EXTI-Line

    // GPIO Init structure definition
    GPIO_InitTypeDef button;
    button.GPIO_Mode = GPIO_Mode_IN;
    button.GPIO_OType = GPIO_OType_PP;
    button.GPIO_Pin = GPIO_Pin_0;
    button.GPIO_PuPd = GPIO_PuPd_NOPULL;
    button.GPIO_Speed = GPIO_Speed_100MHz;
    GPIO_Init(GPIOA, &button);

    // EXTI Init Structure definition - onBoard Button
    EXTI_InitTypeDef iButton;
    iButton.EXTI_Line = EXTI_Line0;
    iButton.EXTI_LineCmd = ENABLE;
    iButton.EXTI_Mode = EXTI_Mode_Interrupt;
    iButton.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_Init(&iButton);

    // Enable EXTI0_IRQn Interrupt
    NVIC_EnableIRQ(EXTI0_IRQn); // register interrupt with NVIC default settings
}

// Function for initializing LED ******************************************
void init_LED(void){
	// enabling Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);   // Clock for LED

	// GPIO Init structure definition
	GPIO_InitTypeDef led;
	led.GPIO_Mode = GPIO_Mode_OUT;
	led.GPIO_OType = GPIO_OType_PP;
	led.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
	led.GPIO_PuPd = GPIO_PuPd_UP;
	led.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &led);   // Initializing the GPIO
}

// ================================= END OF FILE =================================
