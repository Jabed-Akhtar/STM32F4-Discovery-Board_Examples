
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001650  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017d8  080017e0  000117e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080017d8  080017d8  000117d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000117e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000117e0  2**0
                  CONTENTS
  7 .bss          00000070  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000070  20000070  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000117e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000061bc  00000000  00000000  00011810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000010ac  00000000  00000000  000179cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000007d0  00000000  00000000  00018a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000728  00000000  00000000  00019248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00010bdf  00000000  00000000  00019970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00006c47  00000000  00000000  0002a54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000605ea  00000000  00000000  00031196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00091780  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002160  00000000  00000000  000917d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stabstr      0000003f  00000000  00000000  00093930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017c0 	.word	0x080017c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080017c0 	.word	0x080017c0

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000240:	4911      	ldr	r1, [pc, #68]	; (8000288 <NVIC_Init+0xc0>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	7812      	ldrb	r2, [r2, #0]
 8000246:	0952      	lsrs	r2, r2, #5
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800024c:	2201      	movs	r2, #1
 800024e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4909      	ldr	r1, [pc, #36]	; (8000288 <NVIC_Init+0xc0>)
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	7812      	ldrb	r2, [r2, #0]
 8000266:	0952      	lsrs	r2, r2, #5
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <CAN_DeInit+0x44>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d10a      	bne.n	80002b2 <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800029c:	2101      	movs	r1, #1
 800029e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80002a2:	f000 fe81 	bl	8000fa8 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80002a6:	2100      	movs	r1, #0
 80002a8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80002ac:	f000 fe7c 	bl	8000fa8 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 80002b0:	e009      	b.n	80002c6 <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80002b2:	2101      	movs	r1, #1
 80002b4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80002b8:	f000 fe76 	bl	8000fa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80002bc:	2100      	movs	r1, #0
 80002be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80002c2:	f000 fe71 	bl	8000fa8 <RCC_APB1PeriphResetCmd>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40006400 	.word	0x40006400

080002d4 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 80002de:	2300      	movs	r3, #0
 80002e0:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f023 0202 	bic.w	r2, r3, #2
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 0201 	orr.w	r2, r3, #1
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80002fe:	e002      	b.n	8000306 <CAN_Init+0x32>
  {
    wait_ack++;
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	3301      	adds	r3, #1
 8000304:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	2b01      	cmp	r3, #1
 8000310:	d004      	beq.n	800031c <CAN_Init+0x48>
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000318:	4293      	cmp	r3, r2
 800031a:	d1f1      	bne.n	8000300 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	f003 0301 	and.w	r3, r3, #1
 8000324:	2b01      	cmp	r3, #1
 8000326:	d002      	beq.n	800032e <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]
 800032c:	e09c      	b.n	8000468 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d106      	bne.n	8000344 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	e005      	b.n	8000350 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	79db      	ldrb	r3, [r3, #7]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d106      	bne.n	8000366 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	e005      	b.n	8000372 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	7a1b      	ldrb	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d106      	bne.n	8000388 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f043 0220 	orr.w	r2, r3, #32
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	e005      	b.n	8000394 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f023 0220 	bic.w	r2, r3, #32
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	7a5b      	ldrb	r3, [r3, #9]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d106      	bne.n	80003aa <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f043 0210 	orr.w	r2, r3, #16
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	e005      	b.n	80003b6 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f023 0210 	bic.w	r2, r3, #16
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	7a9b      	ldrb	r3, [r3, #10]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d106      	bne.n	80003cc <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0208 	orr.w	r2, r3, #8
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	e005      	b.n	80003d8 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f023 0208 	bic.w	r2, r3, #8
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	7adb      	ldrb	r3, [r3, #11]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d106      	bne.n	80003ee <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f043 0204 	orr.w	r2, r3, #4
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	e005      	b.n	80003fa <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f023 0204 	bic.w	r2, r3, #4
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	78db      	ldrb	r3, [r3, #3]
 8000404:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000406:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	791b      	ldrb	r3, [r3, #4]
 800040c:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800040e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	795b      	ldrb	r3, [r3, #5]
 8000414:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000416:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800041e:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f023 0201 	bic.w	r2, r3, #1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000434:	e002      	b.n	800043c <CAN_Init+0x168>
   {
     wait_ack++;
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3301      	adds	r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	2b01      	cmp	r3, #1
 8000446:	d104      	bne.n	8000452 <CAN_Init+0x17e>
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044e:	4293      	cmp	r3, r2
 8000450:	d1f1      	bne.n	8000436 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	2b01      	cmp	r3, #1
 800045c:	d102      	bne.n	8000464 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e001      	b.n	8000468 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000464:	2301      	movs	r3, #1
 8000466:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000468:	7bfb      	ldrb	r3, [r7, #15]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000478:	b490      	push	{r4, r7}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	7a9b      	ldrb	r3, [r3, #10]
 8000488:	461a      	mov	r2, r3
 800048a:	2301      	movs	r3, #1
 800048c:	4093      	lsls	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000490:	4b59      	ldr	r3, [pc, #356]	; (80005f8 <CAN_FilterInit+0x180>)
 8000492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000496:	4a58      	ldr	r2, [pc, #352]	; (80005f8 <CAN_FilterInit+0x180>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80004a0:	4b55      	ldr	r3, [pc, #340]	; (80005f8 <CAN_FilterInit+0x180>)
 80004a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	43db      	mvns	r3, r3
 80004aa:	4953      	ldr	r1, [pc, #332]	; (80005f8 <CAN_FilterInit+0x180>)
 80004ac:	4013      	ands	r3, r2
 80004ae:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7b1b      	ldrb	r3, [r3, #12]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d129      	bne.n	800050e <CAN_FilterInit+0x96>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80004ba:	4b4f      	ldr	r3, [pc, #316]	; (80005f8 <CAN_FilterInit+0x180>)
 80004bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	43db      	mvns	r3, r3
 80004c4:	494c      	ldr	r1, [pc, #304]	; (80005f8 <CAN_FilterInit+0x180>)
 80004c6:	4013      	ands	r3, r2
 80004c8:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	88db      	ldrh	r3, [r3, #6]
 80004d0:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	8852      	ldrh	r2, [r2, #2]
 80004d6:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004d8:	4947      	ldr	r1, [pc, #284]	; (80005f8 <CAN_FilterInit+0x180>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	7a92      	ldrb	r2, [r2, #10]
 80004de:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80004e0:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004e4:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	889b      	ldrh	r3, [r3, #4]
 80004f0:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	8812      	ldrh	r2, [r2, #0]
 80004f6:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80004f8:	493f      	ldr	r1, [pc, #252]	; (80005f8 <CAN_FilterInit+0x180>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7a92      	ldrb	r2, [r2, #10]
 80004fe:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000500:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000504:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	440b      	add	r3, r1
 800050c:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	7b1b      	ldrb	r3, [r3, #12]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d128      	bne.n	8000568 <CAN_FilterInit+0xf0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <CAN_FilterInit+0x180>)
 8000518:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800051c:	4936      	ldr	r1, [pc, #216]	; (80005f8 <CAN_FilterInit+0x180>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4313      	orrs	r3, r2
 8000522:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	8852      	ldrh	r2, [r2, #2]
 8000530:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000532:	4931      	ldr	r1, [pc, #196]	; (80005f8 <CAN_FilterInit+0x180>)
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7a92      	ldrb	r2, [r2, #10]
 8000538:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800053a:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800053e:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	889b      	ldrh	r3, [r3, #4]
 800054a:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	88d2      	ldrh	r2, [r2, #6]
 8000550:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000552:	4929      	ldr	r1, [pc, #164]	; (80005f8 <CAN_FilterInit+0x180>)
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	7a92      	ldrb	r2, [r2, #10]
 8000558:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800055a:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800055e:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	440b      	add	r3, r1
 8000566:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7adb      	ldrb	r3, [r3, #11]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d109      	bne.n	8000584 <CAN_FilterInit+0x10c>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <CAN_FilterInit+0x180>)
 8000572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	43db      	mvns	r3, r3
 800057a:	491f      	ldr	r1, [pc, #124]	; (80005f8 <CAN_FilterInit+0x180>)
 800057c:	4013      	ands	r3, r2
 800057e:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8000582:	e007      	b.n	8000594 <CAN_FilterInit+0x11c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <CAN_FilterInit+0x180>)
 8000586:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800058a:	491b      	ldr	r1, [pc, #108]	; (80005f8 <CAN_FilterInit+0x180>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4313      	orrs	r3, r2
 8000590:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	891b      	ldrh	r3, [r3, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d108      	bne.n	80005ae <CAN_FilterInit+0x136>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <CAN_FilterInit+0x180>)
 800059e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	43db      	mvns	r3, r3
 80005a6:	4914      	ldr	r1, [pc, #80]	; (80005f8 <CAN_FilterInit+0x180>)
 80005a8:	4013      	ands	r3, r2
 80005aa:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	891b      	ldrh	r3, [r3, #8]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d107      	bne.n	80005c6 <CAN_FilterInit+0x14e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <CAN_FilterInit+0x180>)
 80005b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005bc:	490e      	ldr	r1, [pc, #56]	; (80005f8 <CAN_FilterInit+0x180>)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7b5b      	ldrb	r3, [r3, #13]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d107      	bne.n	80005de <CAN_FilterInit+0x166>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <CAN_FilterInit+0x180>)
 80005d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005d4:	4908      	ldr	r1, [pc, #32]	; (80005f8 <CAN_FilterInit+0x180>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <CAN_FilterInit+0x180>)
 80005e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <CAN_FilterInit+0x180>)
 80005e6:	f023 0301 	bic.w	r3, r3, #1
 80005ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc90      	pop	{r4, r7}
 80005f6:	4770      	bx	lr
 80005f8:	40006400 	.word	0x40006400

080005fc <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000616:	d102      	bne.n	800061e <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e015      	b.n	800064a <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800062a:	d102      	bne.n	8000632 <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e00b      	b.n	800064a <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800063e:	d102      	bne.n	8000646 <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e001      	b.n	800064a <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000646:	2304      	movs	r3, #4
 8000648:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2b04      	cmp	r3, #4
 800064e:	f000 809f 	beq.w	8000790 <CAN_Transmit+0x194>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3318      	adds	r3, #24
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	4413      	add	r3, r2
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	f002 0201 	and.w	r2, r2, #1
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	3318      	adds	r3, #24
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	440b      	add	r3, r1
 800066c:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	7a1b      	ldrb	r3, [r3, #8]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d113      	bne.n	800069e <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	3318      	adds	r3, #24
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	4413      	add	r3, r2
 8000680:	6819      	ldr	r1, [r3, #0]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800068c:	431a      	orrs	r2, r3
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	430a      	orrs	r2, r1
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	3318      	adds	r3, #24
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	440b      	add	r3, r1
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e015      	b.n	80006ca <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	3318      	adds	r3, #24
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	4413      	add	r3, r2
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80006b4:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
 80006ba:	431a      	orrs	r2, r3
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	430a      	orrs	r2, r1
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	3318      	adds	r3, #24
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	440b      	add	r3, r1
 80006c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	7a9b      	ldrb	r3, [r3, #10]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	3318      	adds	r3, #24
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	4413      	add	r3, r2
 80006e2:	3304      	adds	r3, #4
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	f022 020f 	bic.w	r2, r2, #15
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	3318      	adds	r3, #24
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	440b      	add	r3, r1
 80006f4:	3304      	adds	r3, #4
 80006f6:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	3318      	adds	r3, #24
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	4413      	add	r3, r2
 8000702:	3304      	adds	r3, #4
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7a9b      	ldrb	r3, [r3, #10]
 800070a:	4619      	mov	r1, r3
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	430a      	orrs	r2, r1
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	3318      	adds	r3, #24
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	440b      	add	r3, r1
 8000718:	3304      	adds	r3, #4
 800071a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	7b9b      	ldrb	r3, [r3, #14]
 8000720:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	7b5b      	ldrb	r3, [r3, #13]
 8000726:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000728:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	7b1b      	ldrb	r3, [r3, #12]
 800072e:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000730:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[0]));
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	7adb      	ldrb	r3, [r3, #11]
 8000736:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000738:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800073a:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800073c:	6879      	ldr	r1, [r7, #4]
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	440b      	add	r3, r1
 8000742:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000746:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	7c9b      	ldrb	r3, [r3, #18]
 800074c:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	7c5b      	ldrb	r3, [r3, #17]
 8000752:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000754:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	7c1b      	ldrb	r3, [r3, #16]
 800075a:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800075c:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[4]));
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	7bdb      	ldrb	r3, [r3, #15]
 8000762:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000764:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000766:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	440b      	add	r3, r1
 800076e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000772:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	3318      	adds	r3, #24
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	4413      	add	r3, r2
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f042 0201 	orr.w	r2, r2, #1
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	3318      	adds	r3, #24
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	440b      	add	r3, r1
 800078e:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8000790:	7bfb      	ldrb	r3, [r7, #15]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	460b      	mov	r3, r1
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	331b      	adds	r3, #27
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	4413      	add	r3, r2
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7a1b      	ldrb	r3, [r3, #8]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10b      	bne.n	80007e4 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80007cc:	7afb      	ldrb	r3, [r7, #11]
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	331b      	adds	r3, #27
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4413      	add	r3, r2
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	0d5b      	lsrs	r3, r3, #21
 80007da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e00a      	b.n	80007fa <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	331b      	adds	r3, #27
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	4413      	add	r3, r2
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80007fa:	7afb      	ldrb	r3, [r7, #11]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	331b      	adds	r3, #27
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4413      	add	r3, r2
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	b2da      	uxtb	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000812:	7afb      	ldrb	r3, [r7, #11]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	331b      	adds	r3, #27
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	4413      	add	r3, r2
 800081c:	3304      	adds	r3, #4
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	b2da      	uxtb	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800082c:	7afb      	ldrb	r3, [r7, #11]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	331b      	adds	r3, #27
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	4413      	add	r3, r2
 8000836:	3304      	adds	r3, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2da      	uxtb	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000842:	7afb      	ldrb	r3, [r7, #11]
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	4413      	add	r3, r2
 800084a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	4413      	add	r3, r2
 800085e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	b2da      	uxtb	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800086c:	7afb      	ldrb	r3, [r7, #11]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	4413      	add	r3, r2
 8000874:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	b2da      	uxtb	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	4413      	add	r3, r2
 800088a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	0e1b      	lsrs	r3, r3, #24
 8000892:	b2da      	uxtb	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	011b      	lsls	r3, r3, #4
 800089e:	4413      	add	r3, r2
 80008a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80008ac:	7afb      	ldrb	r3, [r7, #11]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	4413      	add	r3, r2
 80008b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	4413      	add	r3, r2
 80008ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	4413      	add	r3, r2
 80008e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	0e1b      	lsrs	r3, r3, #24
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d106      	bne.n	8000902 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	f043 0220 	orr.w	r2, r3, #32
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8000900:	e005      	b.n	800090e <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	f043 0220 	orr.w	r2, r3, #32
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	611a      	str	r2, [r3, #16]
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	4613      	mov	r3, r2
 8000926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	431a      	orrs	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 800093a:	e006      	b.n	800094a <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	43db      	mvns	r3, r3
 8000944:	401a      	ands	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	615a      	str	r2, [r3, #20]
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8000956:	b480      	push	{r7}
 8000958:	b085      	sub	sp, #20
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00d      	beq.n	800098a <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	699a      	ldr	r2, [r3, #24]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	4013      	ands	r3, r2
 8000976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800097e:	2301      	movs	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	e048      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e045      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00d      	beq.n	80009b0 <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	4013      	ands	r3, r2
 800099c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e035      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
 80009ae:	e032      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00d      	beq.n	80009d6 <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	4013      	ands	r3, r2
 80009c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e022      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e01f      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00d      	beq.n	80009fc <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	4013      	ands	r3, r2
 80009e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e00f      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e00c      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	691a      	ldr	r2, [r3, #16]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	4013      	ands	r3, r2
 8000a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	e001      	b.n	8000a16 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a34:	f000 80aa 	beq.w	8000b8c <CAN_ClearITPendingBit+0x168>
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a3e:	f200 80c3 	bhi.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a48:	f000 809c 	beq.w	8000b84 <CAN_ClearITPendingBit+0x160>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a52:	f200 80b9 	bhi.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a5c:	f000 80ad 	beq.w	8000bba <CAN_ClearITPendingBit+0x196>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a66:	f200 80af 	bhi.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a70:	f000 809c 	beq.w	8000bac <CAN_ClearITPendingBit+0x188>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a7a:	f200 80a5 	bhi.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a84:	f000 808e 	beq.w	8000ba4 <CAN_ClearITPendingBit+0x180>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a8e:	f200 809b 	bhi.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a98:	f000 8080 	beq.w	8000b9c <CAN_ClearITPendingBit+0x178>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aa2:	f200 8091 	bhi.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aac:	d072      	beq.n	8000b94 <CAN_ClearITPendingBit+0x170>
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab4:	f200 8088 	bhi.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	2b20      	cmp	r3, #32
 8000abc:	d84a      	bhi.n	8000b54 <CAN_ClearITPendingBit+0x130>
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f000 8081 	beq.w	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	2b1f      	cmp	r3, #31
 8000acc:	d87c      	bhi.n	8000bc8 <CAN_ClearITPendingBit+0x1a4>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <CAN_ClearITPendingBit+0xb0>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000b5d 	.word	0x08000b5d
 8000ad8:	08000bc9 	.word	0x08000bc9
 8000adc:	08000bc9 	.word	0x08000bc9
 8000ae0:	08000b65 	.word	0x08000b65
 8000ae4:	08000bc9 	.word	0x08000bc9
 8000ae8:	08000bc9 	.word	0x08000bc9
 8000aec:	08000bc9 	.word	0x08000bc9
 8000af0:	08000b6d 	.word	0x08000b6d
 8000af4:	08000bc9 	.word	0x08000bc9
 8000af8:	08000bc9 	.word	0x08000bc9
 8000afc:	08000bc9 	.word	0x08000bc9
 8000b00:	08000bc9 	.word	0x08000bc9
 8000b04:	08000bc9 	.word	0x08000bc9
 8000b08:	08000bc9 	.word	0x08000bc9
 8000b0c:	08000bc9 	.word	0x08000bc9
 8000b10:	08000bc9 	.word	0x08000bc9
 8000b14:	08000bc9 	.word	0x08000bc9
 8000b18:	08000bc9 	.word	0x08000bc9
 8000b1c:	08000bc9 	.word	0x08000bc9
 8000b20:	08000bc9 	.word	0x08000bc9
 8000b24:	08000bc9 	.word	0x08000bc9
 8000b28:	08000bc9 	.word	0x08000bc9
 8000b2c:	08000bc9 	.word	0x08000bc9
 8000b30:	08000bc9 	.word	0x08000bc9
 8000b34:	08000bc9 	.word	0x08000bc9
 8000b38:	08000bc9 	.word	0x08000bc9
 8000b3c:	08000bc9 	.word	0x08000bc9
 8000b40:	08000bc9 	.word	0x08000bc9
 8000b44:	08000bc9 	.word	0x08000bc9
 8000b48:	08000bc9 	.word	0x08000bc9
 8000b4c:	08000bc9 	.word	0x08000bc9
 8000b50:	08000b75 	.word	0x08000b75
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2b40      	cmp	r3, #64	; 0x40
 8000b58:	d010      	beq.n	8000b7c <CAN_ClearITPendingBit+0x158>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8000b5a:	e035      	b.n	8000bc8 <CAN_ClearITPendingBit+0x1a4>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <CAN_ClearITPendingBit+0x1b4>)
 8000b60:	609a      	str	r2, [r3, #8]
      break;
 8000b62:	e032      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->RF0R = CAN_RF0R_FULL0; 
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2208      	movs	r2, #8
 8000b68:	60da      	str	r2, [r3, #12]
      break;
 8000b6a:	e02e      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2210      	movs	r2, #16
 8000b70:	60da      	str	r2, [r3, #12]
      break;
 8000b72:	e02a      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->RF1R = CAN_RF1R_FULL1;  
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2208      	movs	r2, #8
 8000b78:	611a      	str	r2, [r3, #16]
      break;
 8000b7a:	e026      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2210      	movs	r2, #16
 8000b80:	611a      	str	r2, [r3, #16]
      break;
 8000b82:	e022      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->MSR = CAN_MSR_WKUI;  
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2208      	movs	r2, #8
 8000b88:	605a      	str	r2, [r3, #4]
      break;
 8000b8a:	e01e      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->MSR = CAN_MSR_SLAKI;   
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2210      	movs	r2, #16
 8000b90:	605a      	str	r2, [r3, #4]
      break;
 8000b92:	e01a      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->MSR = CAN_MSR_ERRI;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2204      	movs	r2, #4
 8000b98:	605a      	str	r2, [r3, #4]
      break;
 8000b9a:	e016      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->MSR = CAN_MSR_ERRI; 
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	605a      	str	r2, [r3, #4]
      break;
 8000ba2:	e012      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->MSR = CAN_MSR_ERRI; 
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	605a      	str	r2, [r3, #4]
       break;
 8000baa:	e00e      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->ESR = RESET; 
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	605a      	str	r2, [r3, #4]
      break;
 8000bb8:	e007      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
      CANx->ESR = RESET; 
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	605a      	str	r2, [r3, #4]
       break;
 8000bc6:	e000      	b.n	8000bca <CAN_ClearITPendingBit+0x1a6>
       break;
 8000bc8:	bf00      	nop
   }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	00010101 	.word	0x00010101

08000bdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <EXTI_Init+0xe0>)
 8000bea:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	799b      	ldrb	r3, [r3, #6]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d04f      	beq.n	8000c94 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000bf4:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <EXTI_Init+0xe0>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	492f      	ldr	r1, [pc, #188]	; (8000cbc <EXTI_Init+0xe0>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <EXTI_Init+0xe0>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	492b      	ldr	r1, [pc, #172]	; (8000cbc <EXTI_Init+0xe0>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6819      	ldr	r1, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <EXTI_Init+0xe0>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4920      	ldr	r1, [pc, #128]	; (8000cbc <EXTI_Init+0xe0>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <EXTI_Init+0xe0>)
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	491c      	ldr	r1, [pc, #112]	; (8000cbc <EXTI_Init+0xe0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	795b      	ldrb	r3, [r3, #5]
 8000c52:	2b10      	cmp	r3, #16
 8000c54:	d10e      	bne.n	8000c74 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <EXTI_Init+0xe0>)
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4917      	ldr	r1, [pc, #92]	; (8000cbc <EXTI_Init+0xe0>)
 8000c60:	4313      	orrs	r3, r2
 8000c62:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <EXTI_Init+0xe0>)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4913      	ldr	r1, [pc, #76]	; (8000cbc <EXTI_Init+0xe0>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000c72:	e01d      	b.n	8000cb0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <EXTI_Init+0xe0>)
 8000c76:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	795b      	ldrb	r3, [r3, #5]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4413      	add	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	e00d      	b.n	8000cb0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	400a      	ands	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40013c00 	.word	0x40013c00

08000cc0 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <EXTI_GetFlagStatus+0x30>)
 8000cce:	695a      	ldr	r2, [r3, #20]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e001      	b.n	8000ce2 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40013c00 	.word	0x40013c00

08000cf4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <EXTI_ClearITPendingBit+0x1c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6153      	str	r3, [r2, #20]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40013c00 	.word	0x40013c00

08000d14 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e076      	b.n	8000e1e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000d30:	2201      	movs	r2, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d165      	bne.n	8000e18 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2103      	movs	r1, #3
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d003      	beq.n	8000d8a <GPIO_Init+0x76>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	791b      	ldrb	r3, [r3, #4]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d12e      	bne.n	8000de8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2103      	movs	r1, #3
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	795b      	ldrb	r3, [r3, #5]
 8000da8:	4619      	mov	r1, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	401a      	ands	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	7992      	ldrb	r2, [r2, #6]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	b292      	uxth	r2, r2
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2103      	movs	r1, #3
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	79db      	ldrb	r3, [r3, #7]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d985      	bls.n	8000d30 <GPIO_Init+0x1c>
    }
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695a      	ldr	r2, [r3, #20]
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	405a      	eors	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	615a      	str	r2, [r3, #20]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e6e:	787a      	ldrb	r2, [r7, #1]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	210f      	movs	r1, #15
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	8879      	ldrh	r1, [r7, #2]
 8000ea0:	08c9      	lsrs	r1, r1, #3
 8000ea2:	b289      	uxth	r1, r1
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	ea02 0103 	and.w	r1, r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f100 0208 	add.w	r2, r0, #8
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	08db      	lsrs	r3, r3, #3
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efe:	4909      	ldr	r1, [pc, #36]	; (8000f24 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000f06:	e006      	b.n	8000f16 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3e:	4909      	ldr	r1, [pc, #36]	; (8000f64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000f46:	e006      	b.n	8000f56 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4904      	ldr	r1, [pc, #16]	; (8000f64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f7e:	4909      	ldr	r1, [pc, #36]	; (8000fa4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000f86:	e006      	b.n	8000f96 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	4904      	ldr	r1, [pc, #16]	; (8000fa4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000fbc:	6a1a      	ldr	r2, [r3, #32]
 8000fbe:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000fc6:	e006      	b.n	8000fd6 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	4904      	ldr	r1, [pc, #16]	; (8000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	620b      	str	r3, [r1, #32]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <SYSCFG_EXTILineConfig+0x80>)
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3302      	adds	r3, #2
 8001016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	4812      	ldr	r0, [pc, #72]	; (8001068 <SYSCFG_EXTILineConfig+0x80>)
 8001020:	79b9      	ldrb	r1, [r7, #6]
 8001022:	0889      	lsrs	r1, r1, #2
 8001024:	b2c9      	uxtb	r1, r1
 8001026:	401a      	ands	r2, r3
 8001028:	1c8b      	adds	r3, r1, #2
 800102a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <SYSCFG_EXTILineConfig+0x80>)
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3302      	adds	r3, #2
 8001038:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800103c:	79f9      	ldrb	r1, [r7, #7]
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <SYSCFG_EXTILineConfig+0x80>)
 800104c:	79b9      	ldrb	r1, [r7, #6]
 800104e:	0889      	lsrs	r1, r1, #2
 8001050:	b2c9      	uxtb	r1, r1
 8001052:	431a      	orrs	r2, r3
 8001054:	1c8b      	adds	r3, r1, #2
 8001056:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40013800 	.word	0x40013800

0800106c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a29      	ldr	r2, [pc, #164]	; (8001128 <TIM_TimeBaseInit+0xbc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d013      	beq.n	80010b0 <TIM_TimeBaseInit+0x44>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <TIM_TimeBaseInit+0xc0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d00f      	beq.n	80010b0 <TIM_TimeBaseInit+0x44>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001096:	d00b      	beq.n	80010b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <TIM_TimeBaseInit+0xc4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d007      	beq.n	80010b0 <TIM_TimeBaseInit+0x44>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a24      	ldr	r2, [pc, #144]	; (8001134 <TIM_TimeBaseInit+0xc8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d003      	beq.n	80010b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <TIM_TimeBaseInit+0xcc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d108      	bne.n	80010c2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010b6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	885a      	ldrh	r2, [r3, #2]
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	4313      	orrs	r3, r2
 80010c0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <TIM_TimeBaseInit+0xd0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00c      	beq.n	80010e4 <TIM_TimeBaseInit+0x78>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <TIM_TimeBaseInit+0xd4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d008      	beq.n	80010e4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80010d2:	89fb      	ldrh	r3, [r7, #14]
 80010d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010d8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	891a      	ldrh	r2, [r3, #8]
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	89fa      	ldrh	r2, [r7, #14]
 80010e8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <TIM_TimeBaseInit+0xbc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d003      	beq.n	800110a <TIM_TimeBaseInit+0x9e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a09      	ldr	r2, [pc, #36]	; (800112c <TIM_TimeBaseInit+0xc0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d104      	bne.n	8001114 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	7a9b      	ldrb	r3, [r3, #10]
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	829a      	strh	r2, [r3, #20]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40010000 	.word	0x40010000
 800112c:	40010400 	.word	0x40010400
 8001130:	40000400 	.word	0x40000400
 8001134:	40000800 	.word	0x40000800
 8001138:	40000c00 	.word	0x40000c00
 800113c:	40001000 	.word	0x40001000
 8001140:	40001400 	.word	0x40001400

08001144 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	b29a      	uxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001166:	e007      	b.n	8001178 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	801a      	strh	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
 8001190:	4613      	mov	r3, r2
 8001192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001194:	787b      	ldrb	r3, [r7, #1]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	899b      	ldrh	r3, [r3, #12]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80011aa:	e009      	b.n	80011c0 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	899b      	ldrh	r3, [r3, #12]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4013      	ands	r3, r2
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	819a      	strh	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	43db      	mvns	r3, r3
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	821a      	strh	r2, [r3, #16]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <main>:
void initCAN(void);


/* ------------------- Main Function -----------------------------------------*/
int main(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
	// Initializing the System
	SystemInit();
 80011f2:	f000 fa11 	bl	8001618 <SystemInit>

	initLED(); // initializing LEDs
 80011f6:	f000 f999 	bl	800152c <initLED>
	initButton(); // initializing Push-Button
 80011fa:	f000 f957 	bl	80014ac <initButton>
	initTIM10(); // initializing Timer
 80011fe:	f000 f921 	bl	8001444 <initTIM10>
	initCAN(); // initializing CAN
 8001202:	f000 f8a7 	bl	8001354 <initCAN>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001206:	bf30      	wfi
}
 8001208:	bf00      	nop

	// Infinite loop
	while (1)
	{
        __WFI(); // wait-for-interrupt -> sleep mode
 800120a:	e7fc      	b.n	8001206 <main+0x18>

0800120c <CAN1_RX0_IRQHandler>:
}


/* ------------------- FUNCTIONS ---------------------------------------------*/
// Interrupt Handler for returning Data Field 2nd received message with ID 0x27 (through 0x14C)
void CAN1_RX0_IRQHandler(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	if(CAN_GetFlagStatus(CAN1, CAN_FLAG_FMP0)){ // when any message is received
 8001210:	491b      	ldr	r1, [pc, #108]	; (8001280 <CAN1_RX0_IRQHandler+0x74>)
 8001212:	481c      	ldr	r0, [pc, #112]	; (8001284 <CAN1_RX0_IRQHandler+0x78>)
 8001214:	f7ff fb9f 	bl	8000956 <CAN_GetFlagStatus>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d029      	beq.n	8001272 <CAN1_RX0_IRQHandler+0x66>
		CAN_Receive(CAN1, CAN_FIFO0, &RxMsg1);
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <CAN1_RX0_IRQHandler+0x7c>)
 8001220:	2100      	movs	r1, #0
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <CAN1_RX0_IRQHandler+0x78>)
 8001224:	f7ff fabb 	bl	800079e <CAN_Receive>
		// when message from ID 0x27 is received
		if(RxMsg1.StdId == 0x200){
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <CAN1_RX0_IRQHandler+0x7c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001230:	d11f      	bne.n	8001272 <CAN1_RX0_IRQHandler+0x66>
			TxMsg3.StdId = 0x14C;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <CAN1_RX0_IRQHandler+0x80>)
 8001234:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8001238:	601a      	str	r2, [r3, #0]
			TxMsg3.RTR = CAN_RTR_Data;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <CAN1_RX0_IRQHandler+0x80>)
 800123c:	2200      	movs	r2, #0
 800123e:	725a      	strb	r2, [r3, #9]
			TxMsg3.IDE = CAN_ID_STD;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <CAN1_RX0_IRQHandler+0x80>)
 8001242:	2200      	movs	r2, #0
 8001244:	721a      	strb	r2, [r3, #8]
			TxMsg3.DLC = 2;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <CAN1_RX0_IRQHandler+0x80>)
 8001248:	2202      	movs	r2, #2
 800124a:	729a      	strb	r2, [r3, #10]
			// Sending the received Messages in reversed form
			TxMsg3.Data[0] = RxMsg1.Data[1];
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <CAN1_RX0_IRQHandler+0x7c>)
 800124e:	7b1b      	ldrb	r3, [r3, #12]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <CAN1_RX0_IRQHandler+0x80>)
 8001254:	72da      	strb	r2, [r3, #11]
			TxMsg3.Data[1] = RxMsg1.Data[0];
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <CAN1_RX0_IRQHandler+0x7c>)
 8001258:	7adb      	ldrb	r3, [r3, #11]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <CAN1_RX0_IRQHandler+0x80>)
 800125e:	731a      	strb	r2, [r3, #12]
			CAN_Transmit(CAN1, &TxMsg3);
 8001260:	490a      	ldr	r1, [pc, #40]	; (800128c <CAN1_RX0_IRQHandler+0x80>)
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <CAN1_RX0_IRQHandler+0x78>)
 8001264:	f7ff f9ca 	bl	80005fc <CAN_Transmit>

			GPIO_ToggleBits(GPIOD, GPIO_Pin_14); // Toggling Pin-PD14
 8001268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <CAN1_RX0_IRQHandler+0x84>)
 800126e:	f7ff fde0 	bl	8000e32 <GPIO_ToggleBits>
		}
	}
	CAN_ClearITPendingBit(CAN1, CAN_IT_FMP0);
 8001272:	2102      	movs	r1, #2
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <CAN1_RX0_IRQHandler+0x78>)
 8001276:	f7ff fbd5 	bl	8000a24 <CAN_ClearITPendingBit>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	12000003 	.word	0x12000003
 8001284:	40006400 	.word	0x40006400
 8001288:	2000001c 	.word	0x2000001c
 800128c:	20000058 	.word	0x20000058
 8001290:	40020c00 	.word	0x40020c00

08001294 <TIM1_UP_TIM10_IRQHandler>:

/* Interrupt Handler for Timer (TIM10) ---------------------------------------*/
void TIM1_UP_TIM10_IRQHandler(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	cou++; // increasing counter
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80012a4:	701a      	strb	r2, [r3, #0]

	TxMsg2.StdId = 0x101;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <TIM1_UP_TIM10_IRQHandler+0x58>)
 80012a8:	f240 1201 	movw	r2, #257	; 0x101
 80012ac:	601a      	str	r2, [r3, #0]
	TxMsg2.DLC = 1;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <TIM1_UP_TIM10_IRQHandler+0x58>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	729a      	strb	r2, [r3, #10]
	TxMsg2.RTR = CAN_RTR_Data;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <TIM1_UP_TIM10_IRQHandler+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	725a      	strb	r2, [r3, #9]
	TxMsg2.IDE = CAN_ID_STD;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <TIM1_UP_TIM10_IRQHandler+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	721a      	strb	r2, [r3, #8]
	TxMsg2.Data[1] = cou;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <TIM1_UP_TIM10_IRQHandler+0x58>)
 80012c8:	731a      	strb	r2, [r3, #12]
	CAN_Transmit(CAN1, &TxMsg2);
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <TIM1_UP_TIM10_IRQHandler+0x58>)
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 80012ce:	f7ff f995 	bl	80005fc <CAN_Transmit>

	GPIO_ToggleBits(GPIOD, GPIO_Pin_13); // Toggling Pin-PD13
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80012d8:	f7ff fdab 	bl	8000e32 <GPIO_ToggleBits>

	TIM_ClearITPendingBit(TIM10, TIM_IT_Update);
 80012dc:	2101      	movs	r1, #1
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <TIM1_UP_TIM10_IRQHandler+0x64>)
 80012e0:	f7ff ff74 	bl	80011cc <TIM_ClearITPendingBit>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000006c 	.word	0x2000006c
 80012ec:	20000044 	.word	0x20000044
 80012f0:	40006400 	.word	0x40006400
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40014400 	.word	0x40014400

080012fc <EXTI0_IRQHandler>:

/* Interrupt Handler for Button ----------------------------------------------*/
void EXTI0_IRQHandler(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	if(EXTI_GetFlagStatus(EXTI_Line0) == SET){
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fcdd 	bl	8000cc0 <EXTI_GetFlagStatus>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d118      	bne.n	800133e <EXTI0_IRQHandler+0x42>
		TxMsg1.StdId = 0x100;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <EXTI0_IRQHandler+0x4c>)
 800130e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001312:	601a      	str	r2, [r3, #0]
		TxMsg1.DLC = 1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <EXTI0_IRQHandler+0x4c>)
 8001316:	2201      	movs	r2, #1
 8001318:	729a      	strb	r2, [r3, #10]
		TxMsg1.RTR = CAN_RTR_Data;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <EXTI0_IRQHandler+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	725a      	strb	r2, [r3, #9]
		TxMsg1.IDE = CAN_ID_STD;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <EXTI0_IRQHandler+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	721a      	strb	r2, [r3, #8]
		TxMsg1.Data[0] = 0x12;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <EXTI0_IRQHandler+0x4c>)
 8001328:	2212      	movs	r2, #18
 800132a:	72da      	strb	r2, [r3, #11]
		CAN_Transmit(CAN1, &TxMsg1);
 800132c:	4906      	ldr	r1, [pc, #24]	; (8001348 <EXTI0_IRQHandler+0x4c>)
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <EXTI0_IRQHandler+0x50>)
 8001330:	f7ff f964 	bl	80005fc <CAN_Transmit>

		GPIO_ToggleBits(GPIOD, GPIO_Pin_12); // Toggling Pin-PD12
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <EXTI0_IRQHandler+0x54>)
 800133a:	f7ff fd7a 	bl	8000e32 <GPIO_ToggleBits>
	}
	EXTI_ClearITPendingBit(EXTI_Line0);
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fcd8 	bl	8000cf4 <EXTI_ClearITPendingBit>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000030 	.word	0x20000030
 800134c:	40006400 	.word	0x40006400
 8001350:	40020c00 	.word	0x40020c00

08001354 <initCAN>:

/* Initializing CAN ----------------------------------------------------------*/
void initCAN(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
	// Configuring Pins for CAN (PD0 and PD1)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800135a:	2101      	movs	r1, #1
 800135c:	2008      	movs	r0, #8
 800135e:	f7ff fdc3 	bl	8000ee8 <RCC_AHB1PeriphClockCmd>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_CAN1);
 8001362:	2209      	movs	r2, #9
 8001364:	2100      	movs	r1, #0
 8001366:	4835      	ldr	r0, [pc, #212]	; (800143c <initCAN+0xe8>)
 8001368:	f7ff fd75 	bl	8000e56 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_CAN1);
 800136c:	2209      	movs	r2, #9
 800136e:	2101      	movs	r1, #1
 8001370:	4832      	ldr	r0, [pc, #200]	; (800143c <initCAN+0xe8>)
 8001372:	f7ff fd70 	bl	8000e56 <GPIO_PinAFConfig>
	GPIO_InitTypeDef pinCAN;
	pinCAN.GPIO_Mode = GPIO_Mode_AF; // Pins must be in AF (Alternative Function)
 8001376:	2302      	movs	r3, #2
 8001378:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	pinCAN.GPIO_OType = GPIO_OType_PP;
 800137c:	2300      	movs	r3, #0
 800137e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	pinCAN.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
	pinCAN.GPIO_PuPd = GPIO_PuPd_NOPULL; // GPIO_PuPd_DOWN
 8001386:	2300      	movs	r3, #0
 8001388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	pinCAN.GPIO_Speed = GPIO_Speed_50MHz;
 800138c:	2302      	movs	r3, #2
 800138e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOD, &pinCAN);
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	4619      	mov	r1, r3
 8001398:	4828      	ldr	r0, [pc, #160]	; (800143c <initCAN+0xe8>)
 800139a:	f7ff fcbb 	bl	8000d14 <GPIO_Init>

	// Enable the CAN controller interface clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 800139e:	2101      	movs	r1, #1
 80013a0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80013a4:	f7ff fdc0 	bl	8000f28 <RCC_APB1PeriphClockCmd>
	// Set CAN1 register to default values */
    CAN_DeInit(CAN1);
 80013a8:	4825      	ldr	r0, [pc, #148]	; (8001440 <initCAN+0xec>)
 80013aa:	f7fe ff6f 	bl	800028c <CAN_DeInit>
	// Initialize and configure the CAN
	CAN_InitTypeDef can;
	can.CAN_ABOM = DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	76fb      	strb	r3, [r7, #27]
	can.CAN_AWUM = ENABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	773b      	strb	r3, [r7, #28]
	can.CAN_BS1 = CAN_BS1_7tq;
 80013b6:	2306      	movs	r3, #6
 80013b8:	763b      	strb	r3, [r7, #24]
	can.CAN_BS2 = CAN_BS2_8tq;
 80013ba:	2307      	movs	r3, #7
 80013bc:	767b      	strb	r3, [r7, #25]
	can.CAN_Mode = CAN_Mode_Normal;
 80013be:	2300      	movs	r3, #0
 80013c0:	75bb      	strb	r3, [r7, #22]
	can.CAN_NART = ENABLE;
 80013c2:	2301      	movs	r3, #1
 80013c4:	777b      	strb	r3, [r7, #29]
	can.CAN_Prescaler = 16;
 80013c6:	2310      	movs	r3, #16
 80013c8:	82bb      	strh	r3, [r7, #20]
	can.CAN_RFLM = DISABLE; // ENABLE
 80013ca:	2300      	movs	r3, #0
 80013cc:	77bb      	strb	r3, [r7, #30]
	can.CAN_SJW = CAN_SJW_1tq;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
	can.CAN_TTCM = DISABLE; // ENABLE
 80013d2:	2300      	movs	r3, #0
 80013d4:	76bb      	strb	r3, [r7, #26]
	can.CAN_TXFP = DISABLE; // ENABLE
 80013d6:	2300      	movs	r3, #0
 80013d8:	77fb      	strb	r3, [r7, #31]
	CAN_Init(CAN1, &can);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4817      	ldr	r0, [pc, #92]	; (8001440 <initCAN+0xec>)
 80013e2:	f7fe ff77 	bl	80002d4 <CAN_Init>
	// CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
	CAN_FilterInitTypeDef canFilt;
	canFilt.CAN_FilterActivation = ENABLE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	747b      	strb	r3, [r7, #17]
	canFilt.CAN_FilterFIFOAssignment = CAN_Filter_FIFO0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	81bb      	strh	r3, [r7, #12]
	canFilt.CAN_FilterIdHigh = 0x0000;
 80013ee:	2300      	movs	r3, #0
 80013f0:	80bb      	strh	r3, [r7, #4]
	canFilt.CAN_FilterIdLow = 0x0000;
 80013f2:	2300      	movs	r3, #0
 80013f4:	80fb      	strh	r3, [r7, #6]
	canFilt.CAN_FilterMaskIdHigh = 0x0000;
 80013f6:	2300      	movs	r3, #0
 80013f8:	813b      	strh	r3, [r7, #8]
	canFilt.CAN_FilterMaskIdLow = 0x0000;
 80013fa:	2300      	movs	r3, #0
 80013fc:	817b      	strh	r3, [r7, #10]
	canFilt.CAN_FilterMode = CAN_FilterMode_IdMask;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
	canFilt.CAN_FilterNumber = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	73bb      	strb	r3, [r7, #14]
	canFilt.CAN_FilterScale = CAN_FilterScale_32bit;
 8001406:	2301      	movs	r3, #1
 8001408:	743b      	strb	r3, [r7, #16]
	CAN_FilterInit(&canFilt);
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f833 	bl	8000478 <CAN_FilterInit>

	// interrupt controller for CAN
	NVIC_InitTypeDef nvic;
	nvic.NVIC_IRQChannel = CAN1_RX0_IRQn;
 8001412:	2314      	movs	r3, #20
 8001414:	703b      	strb	r3, [r7, #0]
	nvic.NVIC_IRQChannelCmd = ENABLE;
 8001416:	2301      	movs	r3, #1
 8001418:	70fb      	strb	r3, [r7, #3]
	nvic.NVIC_IRQChannelPreemptionPriority = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	707b      	strb	r3, [r7, #1]
	nvic.NVIC_IRQChannelSubPriority = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&nvic);
 8001422:	463b      	mov	r3, r7
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fecf 	bl	80001c8 <NVIC_Init>
	//NVIC_EnableIRQ(CAN1_RX0_IRQn);
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
 800142a:	2201      	movs	r2, #1
 800142c:	2102      	movs	r1, #2
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <initCAN+0xec>)
 8001430:	f7ff fa73 	bl	800091a <CAN_ITConfig>
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40006400 	.word	0x40006400

08001444 <initTIM10>:

/* Initializing Timer10 ------------------------------------------------------*/
void initTIM10(void){
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 800144a:	2101      	movs	r1, #1
 800144c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001450:	f7ff fd8a 	bl	8000f68 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseInitTypeDef tim;
	tim.TIM_ClockDivision = TIM_CKD_DIV4;
 8001454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001458:	81bb      	strh	r3, [r7, #12]
	tim.TIM_CounterMode = TIM_CounterMode_Up;
 800145a:	2300      	movs	r3, #0
 800145c:	80fb      	strh	r3, [r7, #6]
	tim.TIM_Period = 500;
 800145e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001462:	60bb      	str	r3, [r7, #8]
	tim.TIM_Prescaler = 16800;
 8001464:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8001468:	80bb      	strh	r3, [r7, #4]
	// tim.TIM_RepetitionCounter =
	TIM_TimeBaseInit(TIM10, &tim);
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <initTIM10+0x64>)
 8001470:	f7ff fdfc 	bl	800106c <TIM_TimeBaseInit>
	NVIC_InitTypeDef nvic_tim;
	nvic_tim.NVIC_IRQChannel = EXTI0_IRQn;
 8001474:	2306      	movs	r3, #6
 8001476:	703b      	strb	r3, [r7, #0]
	nvic_tim.NVIC_IRQChannelCmd = ENABLE;
 8001478:	2301      	movs	r3, #1
 800147a:	70fb      	strb	r3, [r7, #3]
	nvic_tim.NVIC_IRQChannelPreemptionPriority = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	707b      	strb	r3, [r7, #1]
	nvic_tim.NVIC_IRQChannelSubPriority = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&nvic_tim);
 8001484:	463b      	mov	r3, r7
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fe9e 	bl	80001c8 <NVIC_Init>
	TIM_ITConfig(TIM10,TIM_IT_CC4, ENABLE);
 800148c:	2201      	movs	r2, #1
 800148e:	2110      	movs	r1, #16
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <initTIM10+0x64>)
 8001492:	f7ff fe77 	bl	8001184 <TIM_ITConfig>
	TIM_Cmd(TIM10, ENABLE);
 8001496:	2101      	movs	r1, #1
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <initTIM10+0x64>)
 800149a:	f7ff fe53 	bl	8001144 <TIM_Cmd>
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40014400 	.word	0x40014400

080014ac <initButton>:

/* Initializing Pin for Push-Button (On-Board) -------------------------------*/
void initButton(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80014b2:	2101      	movs	r1, #1
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fd17 	bl	8000ee8 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80014ba:	2101      	movs	r1, #1
 80014bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014c0:	f7ff fd52 	bl	8000f68 <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef pin;
	pin.GPIO_Mode = GPIO_Mode_IN;
 80014c4:	2300      	movs	r3, #0
 80014c6:	753b      	strb	r3, [r7, #20]
	pin.GPIO_OType = GPIO_OType_PP;
 80014c8:	2300      	movs	r3, #0
 80014ca:	75bb      	strb	r3, [r7, #22]
	pin.GPIO_Pin = GPIO_Pin_0;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
	pin.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	75fb      	strb	r3, [r7, #23]
	pin.GPIO_Speed = GPIO_Speed_50MHz;
 80014d4:	2302      	movs	r3, #2
 80014d6:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOD, &pin);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4812      	ldr	r0, [pc, #72]	; (8001528 <initButton+0x7c>)
 80014e0:	f7ff fc18 	bl	8000d14 <GPIO_Init>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fd7e 	bl	8000fe8 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef exti;
	exti.EXTI_Line = EXTI_Line0;
 80014ec:	2301      	movs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
	exti.EXTI_LineCmd = ENABLE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73bb      	strb	r3, [r7, #14]
	exti.EXTI_Mode = EXTI_Mode_Interrupt;
 80014f4:	2300      	movs	r3, #0
 80014f6:	733b      	strb	r3, [r7, #12]
	exti.EXTI_Trigger = EXTI_Trigger_Rising;
 80014f8:	2308      	movs	r3, #8
 80014fa:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&exti);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fb6b 	bl	8000bdc <EXTI_Init>
	// interrupt controller for CAN
	NVIC_InitTypeDef nvic_but;
	nvic_but.NVIC_IRQChannel = EXTI0_IRQn;
 8001506:	2306      	movs	r3, #6
 8001508:	713b      	strb	r3, [r7, #4]
	nvic_but.NVIC_IRQChannelCmd = ENABLE;
 800150a:	2301      	movs	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
	nvic_but.NVIC_IRQChannelPreemptionPriority = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	717b      	strb	r3, [r7, #5]
	nvic_but.NVIC_IRQChannelSubPriority = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&nvic_but);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe55 	bl	80001c8 <NVIC_Init>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40020c00 	.word	0x40020c00

0800152c <initLED>:

/* Initializing LEDs ---------------------------------------------------------*/
void initLED(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001532:	2101      	movs	r1, #1
 8001534:	2008      	movs	r0, #8
 8001536:	f7ff fcd7 	bl	8000ee8 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef led;
	led.GPIO_Mode = GPIO_Mode_OUT;
 800153a:	2301      	movs	r3, #1
 800153c:	713b      	strb	r3, [r7, #4]
	led.GPIO_OType = GPIO_OType_PP;
 800153e:	2300      	movs	r3, #0
 8001540:	71bb      	strb	r3, [r7, #6]
	led.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14;
 8001542:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001546:	603b      	str	r3, [r7, #0]
	led.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	71fb      	strb	r3, [r7, #7]
	led.GPIO_Speed = GPIO_Speed_50MHz;
 800154c:	2302      	movs	r3, #2
 800154e:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD, &led);
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <initLED+0x38>)
 8001556:	f7ff fbdd 	bl	8000d14 <GPIO_Init>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020c00 	.word	0x40020c00

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800156c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800156e:	e003      	b.n	8001578 <LoopCopyDataInit>

08001570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001576:	3104      	adds	r1, #4

08001578 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800157c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800157e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001580:	d3f6      	bcc.n	8001570 <CopyDataInit>
  ldr  r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001584:	e002      	b.n	800158c <LoopFillZerobss>

08001586 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001586:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001588:	f842 3b04 	str.w	r3, [r2], #4

0800158c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001590:	d3f9      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001592:	f000 f841 	bl	8001618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f000 f8ef 	bl	8001778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff fe28 	bl	80011ee <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015a4:	080017e0 	.word	0x080017e0
  ldr  r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015ac:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80015b0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80015b4:	20000070 	.word	0x20000070

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>

080015ba <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <HardFault_Handler+0x4>

080015ce <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <BusFault_Handler+0x4>

080015da <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80015de:	e7fe      	b.n	80015de <UsageFault_Handler+0x4>

080015e0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <SystemInit+0x60>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <SystemInit+0x60>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <SystemInit+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <SystemInit+0x64>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <SystemInit+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <SystemInit+0x64>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <SystemInit+0x64>)
 8001644:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <SystemInit+0x64>)
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <SystemInit+0x68>)
 8001652:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <SystemInit+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <SystemInit+0x64>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <SystemInit+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001666:	f000 f80d 	bl	8001684 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800166a:	4b03      	ldr	r3, [pc, #12]	; (8001678 <SystemInit+0x60>)
 800166c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001670:	609a      	str	r2, [r3, #8]
#endif
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	40023800 	.word	0x40023800
 8001680:	24003010 	.word	0x24003010

08001684 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <SetSysClock+0xe4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a34      	ldr	r2, [pc, #208]	; (8001768 <SetSysClock+0xe4>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <SetSysClock+0xe4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <SetSysClock+0x38>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80016ba:	d1f0      	bne.n	800169e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <SetSysClock+0xe4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80016c8:	2301      	movs	r3, #1
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	e001      	b.n	80016d2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d140      	bne.n	800175a <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 2 mode, System frequency up to 144 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <SetSysClock+0xe4>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a22      	ldr	r2, [pc, #136]	; (8001768 <SetSysClock+0xe4>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR &= (uint32_t)~(PWR_CR_VOS);
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <SetSysClock+0xe8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <SetSysClock+0xe8>)
 80016ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016ee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <SetSysClock+0xe4>)
 80016f2:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <SetSysClock+0xe4>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <SetSysClock+0xe4>)
 80016fa:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <SetSysClock+0xe4>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <SetSysClock+0xe4>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <SetSysClock+0xe4>)
 8001706:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800170a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <SetSysClock+0xe4>)
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <SetSysClock+0xec>)
 8001710:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <SetSysClock+0xe4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a14      	ldr	r2, [pc, #80]	; (8001768 <SetSysClock+0xe4>)
 8001718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800171e:	bf00      	nop
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <SetSysClock+0xe4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f9      	beq.n	8001720 <SetSysClock+0x9c>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_1WS;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <SetSysClock+0xf0>)
 800172e:	f240 6201 	movw	r2, #1537	; 0x601
 8001732:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <SetSysClock+0xe4>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <SetSysClock+0xe4>)
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <SetSysClock+0xe4>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <SetSysClock+0xe4>)
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800174c:	bf00      	nop
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SetSysClock+0xe4>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	d1f9      	bne.n	800174e <SetSysClock+0xca>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	08433004 	.word	0x08433004
 8001774:	40023c00 	.word	0x40023c00

08001778 <__libc_init_array>:
 8001778:	b570      	push	{r4, r5, r6, lr}
 800177a:	4d0d      	ldr	r5, [pc, #52]	; (80017b0 <__libc_init_array+0x38>)
 800177c:	4c0d      	ldr	r4, [pc, #52]	; (80017b4 <__libc_init_array+0x3c>)
 800177e:	1b64      	subs	r4, r4, r5
 8001780:	10a4      	asrs	r4, r4, #2
 8001782:	2600      	movs	r6, #0
 8001784:	42a6      	cmp	r6, r4
 8001786:	d109      	bne.n	800179c <__libc_init_array+0x24>
 8001788:	4d0b      	ldr	r5, [pc, #44]	; (80017b8 <__libc_init_array+0x40>)
 800178a:	4c0c      	ldr	r4, [pc, #48]	; (80017bc <__libc_init_array+0x44>)
 800178c:	f000 f818 	bl	80017c0 <_init>
 8001790:	1b64      	subs	r4, r4, r5
 8001792:	10a4      	asrs	r4, r4, #2
 8001794:	2600      	movs	r6, #0
 8001796:	42a6      	cmp	r6, r4
 8001798:	d105      	bne.n	80017a6 <__libc_init_array+0x2e>
 800179a:	bd70      	pop	{r4, r5, r6, pc}
 800179c:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a0:	4798      	blx	r3
 80017a2:	3601      	adds	r6, #1
 80017a4:	e7ee      	b.n	8001784 <__libc_init_array+0xc>
 80017a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017aa:	4798      	blx	r3
 80017ac:	3601      	adds	r6, #1
 80017ae:	e7f2      	b.n	8001796 <__libc_init_array+0x1e>
 80017b0:	080017d8 	.word	0x080017d8
 80017b4:	080017d8 	.word	0x080017d8
 80017b8:	080017d8 	.word	0x080017d8
 80017bc:	080017dc 	.word	0x080017dc

080017c0 <_init>:
 80017c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c2:	bf00      	nop
 80017c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c6:	bc08      	pop	{r3}
 80017c8:	469e      	mov	lr, r3
 80017ca:	4770      	bx	lr

080017cc <_fini>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	bf00      	nop
 80017d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d2:	bc08      	pop	{r3}
 80017d4:	469e      	mov	lr, r3
 80017d6:	4770      	bx	lr
